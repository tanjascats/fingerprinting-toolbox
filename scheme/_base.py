from abc import ABC, abstractmethod
from bitstring import BitArray
import hashlib
import bitstring


class Scheme(ABC):
    """
    Abstract scheme for all schemes implemented within the toolbox
    """
    # todo: default values
    def __init__(self, fingerprint_bit_length=32, number_of_recipients=100):
        if fingerprint_bit_length % 8 == 0:
            self.fingerprint_bit_length = fingerprint_bit_length
        else:
            print('Please provide a fingerprint bit length that is a multiple of 8.')
            exit(1)
        self.number_of_recipients = number_of_recipients

    @abstractmethod
    def insertion(self, dataset, recipient, secret_key):
        pass

    @abstractmethod
    def detection(self, dataset, secret_key):
        pass

    def create_fingerprint(self, recipient_id, secret_key):
        """
        Creates a fingerprint for a recipient with the given ID
        :param recipient_id: identifier of a data copy recipient
        :param secret_key: owner's secret key used to fingerprint the data
        :return: fingerprint (BitArray)
        """
        if recipient_id < 0 or recipient_id >= self.number_of_recipients:
            print("Please specify valid recipient id")
            exit()

        # seed is generated by concatenating secret key with buyers id
        shift = 10
        # seed is 42 bit long
        seed = (secret_key << shift) + recipient_id
        b = hashlib.blake2b(key=seed.to_bytes(6, 'little'), digest_size=int(self.fingerprint_bit_length / 8))
        fingerprint = BitArray(hex=b.hexdigest())
        fp_msg = "\nGenerated fingerprint for recipient " + str(recipient_id) + ": " + fingerprint.bin
        print(fp_msg)
        return fingerprint

    def detect_potential_traitor(self, fingerprint, secret_key):
        """
        Detects a suspect from the extracted fingerprint
        :param fingerprint: string of characters describing binary representation of a fingerprint or a bitstring
        :param secret_key: owner's secret key used to fingerprint the data
        :return: id of a suspect or -1 if no suspect is detected
        """
        if isinstance(fingerprint, bitstring.BitArray):
            fingerprint = fingerprint.bin

        shift = 10
        # for each buyer
        for recipient_id in range(self.number_of_recipients):
            recipient_seed = (secret_key << shift) + recipient_id
            b = hashlib.blake2b(key=recipient_seed.to_bytes(6, 'little'),
                                digest_size=int(self.fingerprint_bit_length / 8))
            recipient_fp = BitArray(hex=b.hexdigest())
            recipient_fp = recipient_fp.bin
            if recipient_fp == fingerprint:
                return recipient_id
        return -1

    def plot_attribute_difference(self, original_dataset, fingerprinted_dataset):
        # for attribute in original dataset
        # # count differences in fp and plot as a bar plot
        # todo
        pass

    def summary(self, original_dataset, fingerprinted_dataset):
        self.plot_attribute_difference(original_dataset, fingerprinted_dataset)
